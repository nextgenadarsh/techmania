{"ast":null,"code":"const QnAs = [{\n  q: \"What is CAP Theorem?\",\n  a: `**The CAP Theorem for distributed computing** was published by Eric Brewer. This states that it is not possible for a distributed computer system to simultaneously provide all three of the following guarantees:\n\n- Consistency (all nodes see the same data even at the same time with concurrent updates)\n- Availability (a guarantee that every request receives a response about whether it was successful or failed)\n- Partition tolerance (the system continues to operate despite arbitrary message loss or failure of part of the system)\n\nThe CAP acronym corresponds to these three guarantees. This theorem has created the base for modern distributed computing approaches. Worlds most high volume traffic companies (e.g. Amazon, Google, Facebook) use this as basis for deciding their application architecture. It's important to understand that only two of these three conditions can be guaranteed to be met by a system.`,\n  tags: ['architecture']\n}, {\n  q: \"Explain the difference between Asynchronous and Parallel programming?\",\n  a: `When you run something asynchronously it means it is non-blocking, you execute it without waiting for it to complete and carry on with other things. Parallelism means to run multiple things at the same time, in parallel. Parallelism works well when you can separate tasks into independent pieces of work. Async and Callbacks are generally a way (tool or mechanism) to express concurrency i.e. a set of entities possibly talking to each other and sharing resources.\n\nTake for example rendering frames of a 3D animation. To render the animation takes a long time so if you were to launch that render from within your animation editing software you would make sure it was running asynchronously so it didn't lock up your UI and you could continue doing other things. Now, each frame of that animation can also be considered as an individual task. If we have multiple CPUs/Cores or multiple machines available, we can render multiple frames in parallel to speed up the overall workload.\n    `\n}];\nexport default QnAs;","map":{"version":3,"sources":["/Users/adarsh/Documents/github/techmania/src/routes/qna-game/data/index.js"],"names":["QnAs","q","a","tags"],"mappings":"AAAA,MAAMA,IAAI,GAAG,CACX;AACEC,EAAAA,CAAC,EAAE,sBADL;AAEEC,EAAAA,CAAC,EAAG;AACR;AACA;AACA;AACA;AACA;AACA,6XARE;AASEC,EAAAA,IAAI,EAAE,CAAC,cAAD;AATR,CADW,EAYX;AACEF,EAAAA,CAAC,EAAE,uEADL;AAEEC,EAAAA,CAAC,EAAG;AACR;AACA;AACA;AALE,CAZW,CAAb;AAqBA,eAAeF,IAAf","sourcesContent":["const QnAs = [\n  {\n    q: \"What is CAP Theorem?\",\n    a: `**The CAP Theorem for distributed computing** was published by Eric Brewer. This states that it is not possible for a distributed computer system to simultaneously provide all three of the following guarantees:\n\n- Consistency (all nodes see the same data even at the same time with concurrent updates)\n- Availability (a guarantee that every request receives a response about whether it was successful or failed)\n- Partition tolerance (the system continues to operate despite arbitrary message loss or failure of part of the system)\n\nThe CAP acronym corresponds to these three guarantees. This theorem has created the base for modern distributed computing approaches. Worlds most high volume traffic companies (e.g. Amazon, Google, Facebook) use this as basis for deciding their application architecture. It's important to understand that only two of these three conditions can be guaranteed to be met by a system.`,\n    tags: ['architecture']\n  },\n  {\n    q: \"Explain the difference between Asynchronous and Parallel programming?\",\n    a: `When you run something asynchronously it means it is non-blocking, you execute it without waiting for it to complete and carry on with other things. Parallelism means to run multiple things at the same time, in parallel. Parallelism works well when you can separate tasks into independent pieces of work. Async and Callbacks are generally a way (tool or mechanism) to express concurrency i.e. a set of entities possibly talking to each other and sharing resources.\n\nTake for example rendering frames of a 3D animation. To render the animation takes a long time so if you were to launch that render from within your animation editing software you would make sure it was running asynchronously so it didn't lock up your UI and you could continue doing other things. Now, each frame of that animation can also be considered as an individual task. If we have multiple CPUs/Cores or multiple machines available, we can render multiple frames in parallel to speed up the overall workload.\n    `\n  }\n];\n\nexport default QnAs;"]},"metadata":{},"sourceType":"module"}